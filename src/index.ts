// Code generated by the Encore v1.10.6 client generator. DO NOT EDIT.

/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
 export type BaseURL = string

 export const Local: BaseURL = "http://localhost:4000"
 
 /**
  * Environment returns a BaseURL for calling the cloud environment with the given name.
  */
 export function Environment(name: string): BaseURL {
     return `https://${name}-expenze-m32i.encr.app`
 }
 
 /**
  * Client is an API client for the expenze-m32i Encore application. 
  */
 export default class Client {
     public readonly auth: auth.ServiceClient
     public readonly countries: countries.ServiceClient
     public readonly expense_categories: expense_categories.ServiceClient
     public readonly teams: teams.ServiceClient
 
 
     /**
      * @deprecated This constructor is deprecated, and you should move to using BaseURL with an Options object
      */
     constructor(target: string, token?: string)
 
     /**
      * Creates a Client for calling the public and authenticated APIs of your Encore application.
      *
      * @param target  The target which the client should be configured to use. See Local and Environment for options.
      * @param options Options for the client
      */
     constructor(target: BaseURL, options?: ClientOptions)
     constructor(target: string | BaseURL = "prod", options?: string | ClientOptions) {
 
         // Convert the old constructor parameters to a BaseURL object and a ClientOptions object
         if (!target.startsWith("http://") && !target.startsWith("https://")) {
             target = Environment(target)
         }
 
         if (typeof options === "string") {
             options = { auth: options }
         }
 
         const base = new BaseClient(target, options ?? {})
         this.auth = new auth.ServiceClient(base)
         this.countries = new countries.ServiceClient(base)
         this.expense_categories = new expense_categories.ServiceClient(base)
         this.teams = new teams.ServiceClient(base)
     }
 }
 
 /**
  * ClientOptions allows you to override any default behaviour within the generated Encore client.
  */
 export interface ClientOptions {
     /**
      * By default the client will use the inbuilt fetch function for making the API requests.
      * however you can override it with your own implementation here if you want to run custom
      * code on each API request made or response received.
      */
     fetcher?: Fetcher
 
     /**
      * Allows you to set the auth token to be used for each request
      * either by passing in a static token string or by passing in a function
      * which returns the auth token.
      *
      * These tokens will be sent as bearer tokens in the Authorization header.
      */
     auth?: string | AuthDataGenerator
 }
 
 export namespace auth {
     export interface HasTransactionPinResponse {
         hasPin: boolean
         ContentType: string
     }
 
     export interface SetTransactionPinReq {
         /**
          * user's transaction pin
          */
         pin: string
 
         /**
          * user's transaction pin entered again for confirmation
          */
         pinConfirmation: string
     }
 
     export class ServiceClient {
         private baseClient: BaseClient
 
         constructor(baseClient: BaseClient) {
             this.baseClient = baseClient
         }
 
         /**
          * HasTransactionPin checks if a user has transaction pin set
          */
         public async HasTransactionPin(): Promise<HasTransactionPinResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/auth/pin`)
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as HasTransactionPinResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * SetTransactionPin creates a new transaction pin for a user
          */
         public async SetTransactionPin(params: SetTransactionPinReq): Promise<void> {
             await this.baseClient.callAPI("POST", `/v1/auth/pin`, JSON.stringify(params))
         }
     }
 }
 
 export namespace countries {
     export interface Country {
         id: string
         name: string
         code: string
         "currency_code": string
         "currency_symbol": string
     }
 
     export interface ListSupportedCountriesResponse {
         /**
          * list of supported countries
          */
         data: Country[]
 
         ContentType: string
     }
 
     export class ServiceClient {
         private baseClient: BaseClient
 
         constructor(baseClient: BaseClient) {
             this.baseClient = baseClient
         }
 
         /**
          * FetchCountryByCode fetchs the supported country by code
          */
         public async FetchCountryByCode(code: string): Promise<Country> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/countries/${encodeURIComponent(code)}`)
             return await resp.json() as Country
         }
 
         /**
          * ListSupportedCountries lists the supported countries
          */
         public async ListSupportedCountries(): Promise<ListSupportedCountriesResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/countries`)
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListSupportedCountriesResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
     }
 }
 
 export namespace expense_categories {
     export interface AddTeamExpenseCategoryRequest {
         name: string
     }
 
     export interface AddTeamExpenseCategoryResponse {
         id: number
         teamId: number
         createdByTeamMemberId: number
         name: string
         ContentType: string
     }
 
     export interface ListTeamExpenseCategoriesResponse {
         data: TeamExpenseCategory[]
         ContentType: string
     }
 
     export interface TeamExpenseCategory {
         id: number
         teamId: number
         createdByTeamMemberId: number
         name: string
     }
 
     export class ServiceClient {
         private baseClient: BaseClient
 
         constructor(baseClient: BaseClient) {
             this.baseClient = baseClient
         }
 
         /**
          * AddTeamExpenseCategory adds a new expense categories for the team id.
          * requires the current user to be a member of the team.
          */
         public async AddTeamExpenseCategory(teamId: number, params: AddTeamExpenseCategoryRequest): Promise<AddTeamExpenseCategoryResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("POST", `/v1/teams/${encodeURIComponent(teamId)}/expense-categories`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as AddTeamExpenseCategoryResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * DeleteTeamExpenseCategory deletes an expense category for the associated team.
          * requires the current user to be a member of the team.
          */
         public async DeleteTeamExpenseCategory(expenseCategoryId: number): Promise<void> {
             await this.baseClient.callAPI("DELETE", `/v1/team-expense-categories/${encodeURIComponent(expenseCategoryId)}`)
         }
 
         /**
          * ListTeamExpenseCategories lists the expense categories for the team id.
          * requires the current user to be a member of the team.
          */
         public async ListTeamExpenseCategories(teamId: number): Promise<ListTeamExpenseCategoriesResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/teams/${encodeURIComponent(teamId)}/expense-categories`)
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListTeamExpenseCategoriesResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
     }
 }
 
 export namespace teams {
     export interface CreateTeamRequest {
         /**
          * the name of the team - required
          */
         name: string
 
         /**
          * the name of the country the team is in
          */
         countryCode: string
     }
 
     export interface CreateTeamResponse {
         /**
          * id of the newly created team
          */
         teamId: number
 
         /**
          * id of the first team member of this team
          */
         teamMemberId: number
 
         /**
          * role of the first team member of this team
          */
         role: string
 
         /**
          * name of this team
          */
         name: string
 
         /**
          * unique code for this team
          */
         code: string
 
         /**
          * owner id refers to the user that owns this team
          */
         ownerId: string
 
         /**
          * created at refers to when this team was created
          */
         createdAt: string
 
         ContentType: string
     }
 
     export interface FetchTeamByCodeResponse {
         /**
          * name of team
          */
         name: string
 
         /**
          * unique code of the team
          */
         code: string
 
         ContentType: string
     }
 
     export interface FetchTeamInvitationsResponse {
         data: TeamInvitationResult[]
         meta: Meta
         ContentType: string
     }
 
     export interface FetchTeamJoinRequestResponse {
         data: TeamJoinRequest[]
         meta: Meta
         ContentType: string
     }
 
     export interface FetchTeamMembersResponse {
         data: TeamMember[]
         meta: Meta
         ContentType: string
     }
 
     export interface InviteTeamMemberByEmailRequest {
         /**
          * emails to invite to join the team
          */
         emails: string[]
     }
 
     export interface InviteTeamMemberByEmailResponse {
         requestId: string
         processing: boolean
         ContentType: string
     }
 
     export interface JoinTeamResponse {
         /**
          * id of the join team request
          */
         id: number
 
         /**
          * team id of the team to join
          */
         teamId: number
 
         /**
          * user id of the user that made this request
          */
         userId: string
 
         /**
          * status of the join team request
          */
         status: string
 
         ContentType: string
     }
 
     export interface JoinTeamResult {
         id: number
         teamId: number
         userId: string
         status: string
         teamName: string
         teamCode: string
     }
 
     export interface ListCurrentUserJoinTeamResponse {
         data: JoinTeamResult[]
         meta: Meta
         ContentType: string
     }
 
     export interface ListCurrentUserTeamInvitationsResponse {
         data: TeamInvitationResult[]
         meta: Meta
         ContentType: string
     }
 
     export interface ListUserTeamsResponse {
         data: UserTeam[]
         meta: Meta
         ContentType: string
     }
 
     export interface Meta {
         page: number
         size: number
         total: number
     }
 
     export interface Pagination {
         /**
          * Fetch the provided page.
          */
         Page: number
 
         /**
          * Fetch only the given size. defaults to 10
          */
         Size: number
     }
 
     export interface RespondToTeamInvitationRequest {
         approved: boolean
     }
 
     export interface RespondToTeamInvitationResponse {
         respondedAt: string
         response: string
         id: number
         userId: string
         email: string
         teamName: string
         teamId: number
         invitedByUserId: string
         ContentType: string
     }
 
     export interface RespondToTeamJoinRequestParam {
         approved: boolean
         role: string
     }
 
     export interface RespondToTeamJoinRequestResponse {
         id: number
         teamId: number
         userid: string
         response: string
         respondedAt: string
         requestedAt: string
         ContentType: string
     }
 
     export interface TeamInvitationResult {
         id: number
         teamId: number
         email: string
         userId: string
         status: string
         role: string
         teamName: string
         teamCode: string
     }
 
     export interface TeamJoinRequest {
         id: number
         teamId: number
         name: string
         email: string
         picture: string
         response: string
         respondedAt: string
         requestedAt: string
     }
 
     export interface TeamMember {
         id: number
         teamId: number
         role: string
         name: string
         email: string
         picture: string
         createdAt: string
     }
 
     export interface UpdateTeamMembershipRequest {
         role: string
     }
 
     export interface UpdateTeamMembershipResponse {
         id: number
         teamId: number
         memberId: string
         role: string
         createdAt: string
         updatedAt: string
         ContentType: string
     }
 
     export interface UserTeam {
         name: string
         code: string
         id: number
     }
 
     export class ServiceClient {
         private baseClient: BaseClient
 
         constructor(baseClient: BaseClient) {
             this.baseClient = baseClient
         }
 
         /**
          * CreateJoinTeamRequest creates a request for the current user to join the team with provided teamCode
          */
         public async CreateJoinTeamRequest(teamId: number): Promise<JoinTeamResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("POST", `/v1/teams/${encodeURIComponent(teamId)}/membership-requests`)
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as JoinTeamResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * CreateTeam creates a new team for the currently logged in user
          */
         public async CreateTeam(params: CreateTeamRequest): Promise<CreateTeamResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("POST", `/v1/teams`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as CreateTeamResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         public async CurrentUserRespondToTeamInvitation(invitationId: number, params: RespondToTeamInvitationRequest): Promise<RespondToTeamInvitationResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("PUT", `/v1/membership-invitations/${encodeURIComponent(invitationId)}`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as RespondToTeamInvitationResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * DeleteTeamMembership allows team admins or owners to delete the membership info of a team member
          * requires the current user to be a member of the team and have role of either an 'admin' or 'owner' role.
          */
         public async DeleteTeamMembership(teamMemberId: number): Promise<void> {
             await this.baseClient.callAPI("DELETE", `/v1/team-members/${encodeURIComponent(teamMemberId)}`)
         }
 
         /**
          * FetchTeamByCode fetches the team basic info by team code
          */
         public async FetchTeamByCode(teamCode: string): Promise<FetchTeamByCodeResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/team-info/${encodeURIComponent(teamCode)}`)
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as FetchTeamByCodeResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * InviteTeamMemberByEmail sends an invitation to provided emails to join the team with id teamId
          */
         public async InviteTeamMemberByEmail(teamId: number, params: InviteTeamMemberByEmailRequest): Promise<InviteTeamMemberByEmailResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("POST", `/v1/teams/${encodeURIComponent(teamId)}/membership-invitations`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as InviteTeamMemberByEmailResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListCurrentUserJoinTeamRequests lists the join team requests created by the current user
          */
         public async ListCurrentUserJoinTeamRequests(params: Pagination): Promise<ListCurrentUserJoinTeamResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/membership-requests`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListCurrentUserJoinTeamResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListCurrentUserTeamInvitations lists the team invitations requests for the current user
          */
         public async ListCurrentUserTeamInvitations(params: Pagination): Promise<ListCurrentUserTeamInvitationsResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/membership-invitations`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListCurrentUserTeamInvitationsResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListCurrentUserTeams lists teams the current user belongs to.
          */
         public async ListCurrentUserTeams(params: Pagination): Promise<ListUserTeamsResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/my-teams`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListUserTeamsResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListTeamInvitations lists the team's invitations that have been sent to different emails.
          * requires the current user to be a member of the team with role of an admin or owner
          */
         public async ListTeamInvitations(teamId: number, params: Pagination): Promise<FetchTeamInvitationsResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/teams/${encodeURIComponent(teamId)}/membership-invitations`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as FetchTeamInvitationsResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListTeamJoinRequests lists the team join requests that belong to a team.
          * requires the current user to be a member of the team with role of an admin or owner
          */
         public async ListTeamJoinRequests(teamId: number, params: Pagination): Promise<FetchTeamJoinRequestResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/teams/${encodeURIComponent(teamId)}/membership-requests`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as FetchTeamJoinRequestResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListTeamMembers lists the team members that belong to a team.
          * requires the current user to be a member of the team.
          */
         public async ListTeamMembers(teamId: number, params: Pagination): Promise<FetchTeamMembersResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/teams/${encodeURIComponent(teamId)}/members`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as FetchTeamMembersResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * ListUserTeams lists teams the user provided belongs to.
          */
         public async ListUserTeams(userId: string, params: Pagination): Promise<ListUserTeamsResponse> {
             // Convert our params into the objects we need for the request
             const query: Record<string, string | string[]> = {
                 page: String(params.Page),
                 size: String(params.Size),
             }
 
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("GET", `/v1/users/${encodeURIComponent(userId)}/teams`, undefined, {query})
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as ListUserTeamsResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * RespondToTeamJoinRequest responds to a users request to join a team.
          * requires the current user to be a member of the team and have role of either an 'admin' or 'owner' role.
          */
         public async RespondToTeamJoinRequest(membershipRequestId: number, params: RespondToTeamJoinRequestParam): Promise<RespondToTeamJoinRequestResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("PUT", `/v1/membership-requests/${encodeURIComponent(membershipRequestId)}`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as RespondToTeamJoinRequestResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
 
         /**
          * UpdateTeamMembership allows team admins or owners to update the membership info of a team member
          * requires the current user to be a member of the team and have role of either an 'admin' or 'owner' role.
          */
         public async UpdateTeamMembership(teamMemberId: number, params: UpdateTeamMembershipRequest): Promise<UpdateTeamMembershipResponse> {
             // Now make the actual call to the API
             const resp = await this.baseClient.callAPI("PUT", `/v1/team-members/${encodeURIComponent(teamMemberId)}`, JSON.stringify(params))
 
             //Populate the return object from the JSON body and received headers
             const rtn = await resp.json() as UpdateTeamMembershipResponse
             rtn.ContentType = mustBeSet("Header `content-type`", resp.headers.get("content-type"))
             return rtn
         }
     }
 }
 
 
 
 function encodeQuery(parts: Record<string, string | string[]>): string {
     const pairs: string[] = []
     for (const key in parts) {
         const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
         for (const v of val) {
             pairs.push(`${key}=${encodeURIComponent(v)}`)
         }
     }
     return pairs.join("&")
 }
 
 // mustBeSet will throw an APIError with the Data Loss code if value is null or undefined
 function mustBeSet<A>(field: string, value: A | null | undefined): A {
     if (value === null || value === undefined) {
         throw new APIError(
             500,
             {
                 code: ErrCode.DataLoss,
                 message: `${field} was unexpectedly ${value}`, // ${value} will create the string "null" or "undefined"
             },
         )
     }
     return value
 }
 
 // CallParameters is the type of the parameters to a method call, but require headers to be a Record type
 type CallParameters = Omit<RequestInit, "method" | "body"> & {
     /** Any headers to be sent with the request */
     headers?: Record<string, string>;
 
     /** Any query parameters to be sent with the request */
     query?: Record<string, string | string[]>
 }
 
 // AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
 export type AuthDataGenerator = () => (string | undefined)
 
 // A fetcher is the prototype for the inbuilt Fetch function
 export type Fetcher = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
 
 class BaseClient {
     readonly baseURL: string
     readonly fetcher: Fetcher
     readonly headers: Record<string, string>
     readonly authGenerator?: AuthDataGenerator
 
     constructor(baseURL: string, options: ClientOptions) {
         this.baseURL = baseURL
         this.headers = {
             "Content-Type": "application/json",
             "User-Agent":   "expenze-m32i-Generated-TS-Client (Encore/v1.10.6)",
         }
 
         // Setup what fetch function we'll be using in the base client
         if (options.fetcher !== undefined) {
             this.fetcher = options.fetcher
         } else {
             this.fetcher = fetch
         }
 
         // Setup an authentication data generator using the auth data token option
         if (options.auth !== undefined) {
             const auth = options.auth
             if (typeof auth === "function") {
                 this.authGenerator = auth
             } else {
                 this.authGenerator = () => auth                
             }
         }
 
     }
 
     // callAPI is used by each generated API method to actually make the request
     public async callAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
         // eslint-disable-next-line prefer-const
         let { query, ...rest } = params ?? {}
         const init = {
             ...rest,
             method,
             body: body ?? null,
         }
 
         // Merge our headers with any predefined headers
         init.headers = {...this.headers, ...init.headers}
 
         // If authorization data generator is present, call it and add the returned data to the request
         let authData: string | undefined
         if (this.authGenerator) {
             authData = this.authGenerator()
         }
 
         // If we now have authentication data, add it to the request
         if (authData) {
             init.headers["Authorization"] = "Bearer " + authData
         }
 
         // Make the actual request
         const queryString = query ? '?' + encodeQuery(query) : ''
         const response = await this.fetcher(this.baseURL+path+queryString, init)
 
         // handle any error responses
         if (!response.ok) {
             // try and get the error message from the response body
             let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }
 
             // if we can get the structured error we should, otherwise give a best effort
             try {
                 const text = await response.text()
 
                 try {
                     const jsonBody = JSON.parse(text)
                     if (isAPIErrorResponse(jsonBody)) {
                         body = jsonBody
                     } else {
                         body.message += ": " + JSON.stringify(jsonBody)
                     }
                 } catch {
                     body.message += ": " + text
                 }
             } catch (e) {
                 // otherwise we just append the text to the error message
                 body.message += ": " + String(e)
             }
 
             throw new APIError(response.status, body)
         }
 
         return response
     }
 }
 
 /**
  * APIErrorDetails represents the response from an Encore API in the case of an error
  */
 interface APIErrorResponse {
     code: ErrCode
     message: string
     details?: any
 }
 
 function isAPIErrorResponse(err: any): err is APIErrorResponse {
     return (
         err !== undefined && err !== null && 
         isErrCode(err.code) &&
         typeof(err.message) === "string" &&
         (err.details === undefined || err.details === null || typeof(err.details) === "object")
     )
 }
 
 function isErrCode(code: any): code is ErrCode {
     return code !== undefined && Object.values(ErrCode).includes(code)
 }
 
 /**
  * APIError represents a structured error as returned from an Encore application.
  */
 export class APIError extends Error {
     /**
      * The HTTP status code associated with the error.
      */
     public readonly status: number
 
     /**
      * The Encore error code
      */
     public readonly code: ErrCode
 
     /**
      * The error details
      */
     public readonly details?: any
 
     constructor(status: number, response: APIErrorResponse) {
         // extending errors causes issues after you construct them, unless you apply the following fixes
         super(response.message);
         
         // set error name as constructor name, make it not enumerable to keep native Error behavior
         // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
         Object.defineProperty(this, 'name', {
             value:        'APIError',
             enumerable:   false,
             configurable: true,
         })
         
         // fix the prototype chain
         if ((Object as any).setPrototypeOf == undefined) { 
             (this as any).__proto__ = APIError.prototype 
         } else {
             Object.setPrototypeOf(this, APIError.prototype);
         }
         
         // capture a stack trace
         if ((Error as any).captureStackTrace !== undefined) {
             (Error as any).captureStackTrace(this, this.constructor);
         }
 
         this.status = status
         this.code = response.code
         this.details = response.details
     }
 }
 
 /**
  * Typeguard allowing use of an APIError's fields'
  */
 export function isAPIError(err: any): err is APIError {
     return err instanceof APIError;
 }
 
 export enum ErrCode {
     /**
      * OK indicates the operation was successful.
      */
     OK = "ok",
 
     /**
      * Canceled indicates the operation was canceled (typically by the caller).
      *
      * Encore will generate this error code when cancellation is requested.
      */
     Canceled = "canceled",
 
     /**
      * Unknown error. An example of where this error may be returned is
      * if a Status value received from another address space belongs to
      * an error-space that is not known in this address space. Also
      * errors raised by APIs that do not return enough error information
      * may be converted to this error.
      *
      * Encore will generate this error code in the above two mentioned cases.
      */
     Unknown = "unknown",
 
     /**
      * InvalidArgument indicates client specified an invalid argument.
      * Note that this differs from FailedPrecondition. It indicates arguments
      * that are problematic regardless of the state of the system
      * (e.g., a malformed file name).
      *
      * This error code will not be generated by the gRPC framework.
      */
     InvalidArgument = "invalid_argument",
 
     /**
      * DeadlineExceeded means operation expired before completion.
      * For operations that change the state of the system, this error may be
      * returned even if the operation has completed successfully. For
      * example, a successful response from a server could have been delayed
      * long enough for the deadline to expire.
      *
      * The gRPC framework will generate this error code when the deadline is
      * exceeded.
      */
     DeadlineExceeded = "deadline_exceeded",
 
     /**
      * NotFound means some requested entity (e.g., file or directory) was
      * not found.
      *
      * This error code will not be generated by the gRPC framework.
      */
     NotFound = "not_found",
 
     /**
      * AlreadyExists means an attempt to create an entity failed because one
      * already exists.
      *
      * This error code will not be generated by the gRPC framework.
      */
     AlreadyExists = "already_exists",
 
     /**
      * PermissionDenied indicates the caller does not have permission to
      * execute the specified operation. It must not be used for rejections
      * caused by exhausting some resource (use ResourceExhausted
      * instead for those errors). It must not be
      * used if the caller cannot be identified (use Unauthenticated
      * instead for those errors).
      *
      * This error code will not be generated by the gRPC core framework,
      * but expect authentication middleware to use it.
      */
     PermissionDenied = "permission_denied",
 
     /**
      * ResourceExhausted indicates some resource has been exhausted, perhaps
      * a per-user quota, or perhaps the entire file system is out of space.
      *
      * This error code will be generated by the gRPC framework in
      * out-of-memory and server overload situations, or when a message is
      * larger than the configured maximum size.
      */
     ResourceExhausted = "resource_exhausted",
 
     /**
      * FailedPrecondition indicates operation was rejected because the
      * system is not in a state required for the operation's execution.
      * For example, directory to be deleted may be non-empty, an rmdir
      * operation is applied to a non-directory, etc.
      *
      * A litmus test that may help a service implementor in deciding
      * between FailedPrecondition, Aborted, and Unavailable:
      *  (a) Use Unavailable if the client can retry just the failing call.
      *  (b) Use Aborted if the client should retry at a higher-level
      *      (e.g., restarting a read-modify-write sequence).
      *  (c) Use FailedPrecondition if the client should not retry until
      *      the system state has been explicitly fixed. E.g., if an "rmdir"
      *      fails because the directory is non-empty, FailedPrecondition
      *      should be returned since the client should not retry unless
      *      they have first fixed up the directory by deleting files from it.
      *  (d) Use FailedPrecondition if the client performs conditional
      *      REST Get/Update/Delete on a resource and the resource on the
      *      server does not match the condition. E.g., conflicting
      *      read-modify-write on the same resource.
      *
      * This error code will not be generated by the gRPC framework.
      */
     FailedPrecondition = "failed_precondition",
 
     /**
      * Aborted indicates the operation was aborted, typically due to a
      * concurrency issue like sequencer check failures, transaction aborts,
      * etc.
      *
      * See litmus test above for deciding between FailedPrecondition,
      * Aborted, and Unavailable.
      */
     Aborted = "aborted",
 
     /**
      * OutOfRange means operation was attempted past the valid range.
      * E.g., seeking or reading past end of file.
      *
      * Unlike InvalidArgument, this error indicates a problem that may
      * be fixed if the system state changes. For example, a 32-bit file
      * system will generate InvalidArgument if asked to read at an
      * offset that is not in the range [0,2^32-1], but it will generate
      * OutOfRange if asked to read from an offset past the current
      * file size.
      *
      * There is a fair bit of overlap between FailedPrecondition and
      * OutOfRange. We recommend using OutOfRange (the more specific
      * error) when it applies so that callers who are iterating through
      * a space can easily look for an OutOfRange error to detect when
      * they are done.
      *
      * This error code will not be generated by the gRPC framework.
      */
     OutOfRange = "out_of_range",
 
     /**
      * Unimplemented indicates operation is not implemented or not
      * supported/enabled in this service.
      *
      * This error code will be generated by the gRPC framework. Most
      * commonly, you will see this error code when a method implementation
      * is missing on the server. It can also be generated for unknown
      * compression algorithms or a disagreement as to whether an RPC should
      * be streaming.
      */
     Unimplemented = "unimplemented",
 
     /**
      * Internal errors. Means some invariants expected by underlying
      * system has been broken. If you see one of these errors,
      * something is very broken.
      *
      * This error code will be generated by the gRPC framework in several
      * internal error conditions.
      */
     Internal = "internal",
 
     /**
      * Unavailable indicates the service is currently unavailable.
      * This is a most likely a transient condition and may be corrected
      * by retrying with a backoff. Note that it is not always safe to retry
      * non-idempotent operations.
      *
      * See litmus test above for deciding between FailedPrecondition,
      * Aborted, and Unavailable.
      *
      * This error code will be generated by the gRPC framework during
      * abrupt shutdown of a server process or network connection.
      */
     Unavailable = "unavailable",
 
     /**
      * DataLoss indicates unrecoverable data loss or corruption.
      *
      * This error code will not be generated by the gRPC framework.
      */
     DataLoss = "data_loss",
 
     /**
      * Unauthenticated indicates the request does not have valid
      * authentication credentials for the operation.
      *
      * The gRPC framework will generate this error code when the
      * authentication metadata is invalid or a Credentials callback fails,
      * but also expect authentication middleware to generate it.
      */
     Unauthenticated = "unauthenticated",
 }
 